<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--
        xml：可扩展标记语言
        在项目中，常用于书写配置文件
        xml 文件由两种约束限制方式：DTD、Schema
            DTD ：一个 xml 文件只能引用一个 DTD 文件，约束 xml 文件中的标签、属性、文本。
            Schema ：一个 xml 文件可以引用多个 Schema 文件，被多个 Schema 约束。
    -->
    <bean id="userDao" class="com.demo.dao.impl.UserDaoImpl"/>

    <bean id="userService" class="com.demo.service.impl.UserServiceImpl">
        <!-- 配置 UserServiceImpl 类中有参构造的参数 -->
        <property name="userDao" ref="userDao"/>
    </bean>

    <!-- 配置需要增强的类的 bean -->
    <bean id="userServiceImplAdvice" class="com.demo.aop.UserServiceImplAdvice"/>

    <!--
        Spring AOP（面向切面编程）：AOP允许在不修改源代码的情况下，对程序代码进行增强，在调用类中某个方法时会被 aop 技术拦截，拦截之后可以写一些增强的代码。
            连接点（joinPoint）：程序中执行过程中可以插入切面的点，通常是方法的执行点。
            切入点（pointcut）：用于定义哪些连接点（即哪些方法的执行）将被增强。
            通知（advice）：也称为增强，定义了要在切入点选择的连接点上执行的行为。
            切面（aspect）：切面是通知和切入点的结合。切面定义了在何时、何地以及如何将横切关注点织入到目标对象中。
    -->
    <aop:config>
        <!--
            配置切入点（pointcut）：要增强哪个类中的哪些方法
            id：给切入点命名
            expression：配置切入点表达式
                1. bean(bean Id / bean name)：配置被 spring 管理的 bean，这个类中的所有方法都会被切入
                    bean(userService)
                2. execution( <访问修饰符> <返回值类型> <包.类/接口.方法名>(<参数>) <异常> )
                    execution(* com.demo.service.UserService.addUser())   * 通配符，表示任意访问修饰符和返回值类型
                    execution(* com.demo.service..*.addUser())            service..* 表示 service 包下所有类中的 addUser() 方法
                    execution(* com.demo.service.UserService.add*())      add*() 表示 UserService 类中的所有方法名以 add 开头的方法
                    execution(* com.demo.service.UserService.*User())     *User() 表示 UserService 类中的所有方法名以 User 结尾的方法
                    execution(* com.demo.service.UserService.*(..))       表示 UserService 类中的任何方法，任意参数
                3. within(包.类)
                    within(com.demo.service.impl.UserService)
        -->
        <aop:pointcut id="pointcut" expression="execution(* com.demo.service.UserService.*(..))"/>
        <!--
            配置切面（aspect）：
            ref：配置切入点对应的增强类
            pointcut-ref：配置切入点
        -->
        <aop:aspect ref="userServiceImplAdvice">
            <!-- 通知（advice） -->
            <!-- 前置通知，在目标方法之前执行 -->
            <aop:before method="fnBefore" pointcut-ref="pointcut"/>
            <!-- 返回通知，在目标方法成功执行后执行，即方法返回结果后执行 -->
            <aop:after-returning method="fnAfterReturning" pointcut-ref="pointcut"/>
            <!-- 异常通知，在目标方法抛出异常后执行-->
            <aop:after-throwing method="fnAfterThrowing" pointcut-ref="pointcut"/>
            <!--
                环绕通知，包裹目标方法执行，在目标方法执行前后执行自定义逻辑
                它可以决定是否继续执行原始的方法调用。如果决定不继续执行，则可以在环绕通知中直接返回，从而跳过原始方法的执行。
                如果决定继续执行，则可以使用反射或其他机制来调用原始方法。
            -->
            <aop:around method="fnAround" pointcut-ref="pointcut"/>
            <!-- 后置通知，在目标方法执行之后执行，无论是否抛出异常-->
            <aop:after method="fnAfter" pointcut-ref="pointcut"/>

        </aop:aspect>
    </aop:config>

</beans>