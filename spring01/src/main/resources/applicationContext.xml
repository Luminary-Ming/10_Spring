<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		https://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--
        Spring 框架：称为 Spring 容器（也叫 IOC 容器），它的主要功能是将 Java 开发中的其他框架整合到一起，
        并且可以帮助我们完成对象的创建、初始化、对象之间的依赖关系、销毁等一系列工作。
        Spring 的核心技术：
        1. IOC 容器（Inverse Of Control 控制反转），将对象的控制权交给 Spring 框架，包括对象的创建、初始化、对象之间的依赖关系、销毁等交给Spring容器。
        2. AOP（Aspect Oriented Programming 面向切面编程），基于动态代理的功能增强方式。

        当使用 bean 标签配置类文件时，Spring 就会通过 bean 标签管理每个类的对象（创建、初始化、对象之间的依赖关系、销毁等一系列工作）。
        当程序加载这个配置文件的时候，Spring 内部就会读取配置的 bean 标签，然后去调用类的无参构造，实例化每个 bean 中的类。
        bean 标签中的属性：
            id：给当前 Spring 管理的类的对象命名，且唯一不可重复
            name：作用与 id 相同
            class：配置需要 Spring 管理的类
     -->
    <bean id="userDao" class="com.demo.dao.impl.UserDaoImpl"/>

    <!--
        DI：依赖注入，通过配置将 Spring 管理的某个对象注入到所需要的类中。
        如：Service 层的实现类需要使用 Dao 层的实现类的对象，那么就可以通过配置，将 Dao 层的实现类的对象注入到 Service 层的实现类中。
    -->
    <bean name="userService" class="com.demo.service.impl.UserServiceImpl">
        <!--
            在 UserServiceImpl 类中提供了有参的构造方法：
            public UserServiceImpl(UserDao userDao) { this.userDao = userDao; }
            因此可以配置 constructor-arg 标签给构造方法传递数据
            name：当前类中有参构造中的参数名
            ref：引用被 Spring 管理的某个对象
        -->
        <constructor-arg name="userDao" ref="userDao"/>
    </bean>

</beans>